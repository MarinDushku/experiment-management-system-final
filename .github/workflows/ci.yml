name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.9'

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python Dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Create Test Environment File
      working-directory: ./backend
      run: |
        echo "NODE_ENV=test" > .env
        echo "MONGODB_URI=mongodb://localhost:27017/experiment_management_test" >> .env
        echo "MONGODB_TEST_URI=mongodb://localhost:27017/experiment_management_test" >> .env
        echo "JWT_SECRET=test_jwt_secret_key_for_ci" >> .env
        echo "PORT=5000" >> .env
        echo "OPENBCI_MOCK_MODE=true" >> .env

    - name: Run Backend Unit Tests
      working-directory: ./backend
      run: npm run test:unit

    - name: Run Backend Integration Tests
      working-directory: ./backend
      run: npm run test:integration

    - name: Run Python Tests
      working-directory: ./backend
      run: python -m pytest tests/ -v --tb=short

    - name: Generate Test Coverage
      working-directory: ./backend
      run: npm run test:coverage

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci --legacy-peer-deps

    - name: Create Test Environment File
      working-directory: ./frontend
      run: |
        echo "REACT_APP_API_URL=http://localhost:5000/api" > .env
        echo "GENERATE_SOURCEMAP=false" >> .env

    - name: Run Frontend Tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/

  lint-and-security:
    name: Linting and Security Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci

    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci --legacy-peer-deps

    - name: Run Backend Security Audit
      working-directory: ./backend
      run: npm audit --audit-level high

    - name: Run Frontend Security Audit
      working-directory: ./frontend
      run: npm audit --audit-level high

    - name: Run Backend Linting (if configured)
      working-directory: ./backend
      run: |
        if [ -f .eslintrc.js ] || [ -f .eslintrc.json ]; then
          npx eslint . --ext .js --max-warnings 0
        else
          echo "ESLint not configured, skipping..."
        fi
      continue-on-error: true

    - name: Run Frontend Linting (if configured)
      working-directory: ./frontend
      run: |
        if [ -f .eslintrc.js ] || [ -f .eslintrc.json ]; then
          npx eslint src/ --ext .js,.jsx --max-warnings 0
        else
          echo "ESLint not configured, skipping..."
        fi
      continue-on-error: true

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci --legacy-peer-deps

    - name: Setup Test Environment
      run: |
        cd backend
        echo "NODE_ENV=test" > .env
        echo "MONGODB_URI=mongodb://localhost:27017/experiment_management_e2e" >> .env
        echo "JWT_SECRET=e2e_test_secret" >> .env
        echo "PORT=5000" >> .env
        echo "OPENBCI_MOCK_MODE=true" >> .env
        
        cd ../frontend
        echo "REACT_APP_API_URL=http://localhost:5000/api" > .env

    - name: Create Test Admin User
      working-directory: ./backend
      run: npm run create-admin

    - name: Start Backend Server
      working-directory: ./backend
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:5000/api/test || exit 1

    - name: Build and Start Frontend
      working-directory: ./frontend
      run: |
        npm run build
        npx serve -s build -l 3000 &
        sleep 10
        curl -f http://localhost:3000 || exit 1

    - name: Run Cypress E2E Tests
      working-directory: ./frontend
      run: |
        if [ -f cypress.config.js ]; then
          npx cypress run --headless --browser electron
        else
          echo "Cypress not configured, skipping E2E tests..."
        fi
      env:
        CYPRESS_baseUrl: http://localhost:3000
        CYPRESS_apiUrl: http://localhost:5000/api

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Docker Environment
      run: cp .env.docker .env

    - name: Test Docker Compose Build
      run: docker-compose build --no-cache

    - name: Test Docker Compose Up
      run: |
        docker-compose up -d
        sleep 30
        
        # Test backend health
        curl -f http://localhost:5000/api/test || exit 1
        
        # Test frontend
        curl -f http://localhost:80 || exit 1
        
        docker-compose down

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, lint-and-security, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment:
      name: staging
      url: https://staging.yourproject.com

    steps:
    - uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push Images
      run: |
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --push \
          --tag ghcr.io/${{ github.repository }}/backend:staging \
          --file Dockerfile.backend .
        
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --push \
          --tag ghcr.io/${{ github.repository }}/frontend:staging \
          --file Dockerfile.frontend .

    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # This could be SSH to server, kubectl apply, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, lint-and-security, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://yourproject.com

    steps:
    - uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push Images
      run: |
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --push \
          --tag ghcr.io/${{ github.repository }}/backend:latest \
          --tag ghcr.io/${{ github.repository }}/backend:${{ github.sha }} \
          --file Dockerfile.backend .
        
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --push \
          --tag ghcr.io/${{ github.repository }}/frontend:latest \
          --tag ghcr.io/${{ github.repository }}/frontend:${{ github.sha }} \
          --file Dockerfile.frontend .

    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # This could include:
        # - SSH to production servers
        # - Kubernetes deployment
        # - Docker Swarm update
        # - AWS ECS deployment
        # - etc.

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, lint-and-security, e2e-tests, docker-build]
    if: always()

    steps:
    - name: Notify Success
      if: ${{ needs.test-backend.result == 'success' && needs.test-frontend.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        # Add notification logic here (Slack, Discord, email, etc.)

    - name: Notify Failure
      if: ${{ needs.test-backend.result == 'failure' || needs.test-frontend.result == 'failure' }}
      run: |
        echo "❌ Some tests failed!"
        # Add failure notification logic here